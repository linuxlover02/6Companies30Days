class Solution {
    class MyCmp implements Comparator<String>{
        public int compare(String s1, String s2){
            return s1.compareTo(s2);
        }
    }

    class Pair implements Comparable<Pair>{
        int total; String id; String name; int mostViews;
        Pair(int total, String id, String name, int mostViews){
            this.total=total; this.id=id; this.name=name; this.mostViews = mostViews;
        }

        public int compareTo(Pair p){
            return p.total-this.total;
        }
    }
    public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
        int n = creators.length;
        HashMap<String,Pair> map = new HashMap<>();
        for(int i=0; i<n; i++){
            String name = creators[i];
            if(map.containsKey(name)){
                Pair cur = map.get(name);
                cur.total+=views[i];
                if(cur.mostViews<views[i]){
                    cur.mostViews=views[i];
                    cur.id=ids[i];
                }else if(cur.mostViews==views[i] && (cur.id.compareTo(ids[i])>0)){
                    cur.id=ids[i];
                }
            }else{
                map.put(name,new Pair(views[i],ids[i],name,views[i]));
            }
        }     

        PriorityQueue<Pair> pq = new PriorityQueue<>();

        for(Map.Entry<String,Pair> mp: map.entrySet()){
            pq.add(mp.getValue());
        }    

        List<List<String>> list = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        Pair cur = pq.poll();
        temp.add(cur.name);
        temp.add(cur.id);
        list.add(temp);


        while(!pq.isEmpty() && pq.peek().total==cur.total){
            cur = pq.poll();
            List<String> ne = new ArrayList<>();
            ne.add(cur.name);
            ne.add(cur.id);
            list.add(ne);
        }

        return list;
    }
}
