class Solution {
    int mod = 1000000007;
    public int numberOfWays(int startPos, int endPos, int k) {
        int start = Math.min(startPos,endPos);
        int end = Math.max(startPos,endPos);
        int dp[][] = new int[3002][k+1];
        for(int row[]: dp){
            Arrays.fill(row, -1);
        }

        int diff = end-start;
        if(k==diff) return 1;
        if(diff>k || (k-diff)%2!=0) return 0;
        return helper(startPos,k,endPos,dp);   
    }

    int helper(int curPos, int k, int endPos,int[][]dp){
        if(dp[curPos+1000][k]!=-1) return dp[curPos+1000][k];
        if(curPos==endPos && k==0){
            return dp[curPos+1000][0]=1;
        }
        if(k==0) return dp[curPos+1000][k]=0;

        int left = helper(curPos+1,k-1,endPos,dp);
        int right = helper(curPos-1,k-1,endPos,dp);
        left%=mod; right%=mod;
        return dp[curPos+1000][k]=(left+right)%mod;
    }
}
