class Solution {
    class Pair{
        int v; int price;
        Pair(int v, int price){
            this.v=v; this.price=price;
        }
    }

    int ans = Integer.MAX_VALUE;
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0; i<flights.length; i++){
            adj.get(flights[i][0]).add(new Pair(flights[i][1],flights[i][2]));
        }

        int priceArr[] = new int[n];
        Arrays.fill(priceArr,Integer.MAX_VALUE);
        priceArr[src] = 0;

        ArrayDeque<ArrayList<Integer>> q = new ArrayDeque<>();
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(src); cur.add(0); cur.add(0);
        q.add(cur);

        while(!q.isEmpty()){
            ArrayList<Integer> temp = q.poll();
            int curNode = temp.get(0);
            int stops = temp.get(1);
            int price = temp.get(2);
            if(stops>k) continue;

            for(Pair p: adj.get(curNode)){
                if((price+p.price)<priceArr[p.v] && stops<=k){
                    ArrayList<Integer> e = new ArrayList<>();
                    priceArr[p.v]=price+p.price;                
                    e.add(p.v);
                    e.add(stops+1);
                    e.add(price+p.price);
                    q.add(e);
                }
            }
        }

        if(priceArr[dst]==Integer.MAX_VALUE) return -1;
        return priceArr[dst];        
    }
}
