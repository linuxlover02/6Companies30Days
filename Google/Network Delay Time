class Solution {
    class Pair{
        int target,time;
        Pair(int target, int time){
            this.target=target; this.time=time;
        }
    }

    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0; i<=n; i++){
            adj.add(new ArrayList<>());
        }  
        for(int i=0; i<times.length; i++){
            adj.get(times[i][0]).add(new Pair(times[i][1],times[i][2]));
        } 
        int minTime[] = new int[n+1];
        Arrays.fill(minTime,Integer.MAX_VALUE);
        minTime[k]=0;
        helper(k,adj,minTime);
        int ans = Integer.MIN_VALUE;
        for(int i=1; i<=n; i++){
            if(minTime[i]==Integer.MAX_VALUE) return -1;
            ans = Math.max(ans,minTime[i]);
        }    
        return ans;    
    }

    public void helper(int curNode, ArrayList<ArrayList<Pair>> adj, int[]minTime){
        for(Pair cur: adj.get(curNode)){
            if(minTime[cur.target]>(minTime[curNode]+cur.time)){
                minTime[cur.target]=minTime[curNode]+cur.time;
                helper(cur.target,adj,minTime);
            }
        }
    }
}
