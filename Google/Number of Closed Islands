class Solution {
    public int closedIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int visited[][] = new int[m][n];
        int ans=0;
        for(int i=1; i<m-1; i++){
            for(int j=1; j<n-1; j++){
                if(grid[i][j]==0 && visited[i][j]==0){                    
                    if(helper(i,j,grid,visited)) ans++;
                }
            }
        }

        return ans;
    }

    boolean helper(int i, int j, int[][]grid, int[][] visited){
        int dx[] = {0,0,-1,1};
        int dy[] = {-1,1,0,0};
        visited[i][j]=1;
        boolean res = true;
        for(int k=0; k<4; k++){
            int nRow = i+dx[k];
            int nCol = j+dy[k];
            if(isPossible(nRow,nCol,grid)){
            if(nRow==0 || nRow==grid.length-1 || nCol==0 || nCol==grid[0].length-1 || visited[nRow][nCol]==-1){
                visited[i][j]=-1;
                return false;
            }  
                if(visited[nRow][nCol]==1) continue;
                res = res && helper(nRow,nCol,grid,visited);
            }
        }
        if(res==false) visited[i][j]=-1;
        return res;
    }

    boolean isPossible(int i, int j, int[][]grid){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]==1) return false;
        return true;
    }
}
