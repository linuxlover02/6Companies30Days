class Solution {
    public boolean canFinish(int n, int[][] pre) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i1=0; i1<n; i1++){
            adj.add(new ArrayList<Integer>());
        }
        for(int idx=0; idx<pre.length; idx++){
            adj.get(pre[idx][1]).add(pre[idx][0]);
        }

        int indeg[] = new int[n];
        indegree(pre,indeg);

        int taskRemain=n;

        ArrayDeque<Integer> q = new ArrayDeque<>();
        for(int i=0; i<n; i++){
            if(indeg[i]==0){
                q.add(i);
            }
        }

        while(!q.isEmpty()){
            int u=q.poll();
            taskRemain--;
            for(int k=0; k<adj.get(u).size(); k++){
                indeg[adj.get(u).get(k)]--;
                if(indeg[adj.get(u).get(k)]==0){
                    q.add(adj.get(u).get(k));
                }
            }
        }

        return taskRemain==0;        
    }

    public void indegree(int [][]pre, int []indeg){
        int n = pre.length;
        for(int i=0; i<n; i++){
            indeg[pre[i][0]]++;
        }
    }
}
