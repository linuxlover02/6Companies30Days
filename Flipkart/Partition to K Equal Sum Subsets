class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int n = nums.length;
        long arr[] = new long[k];
        long sum = 0;
        for(int i=0; i<n; i++){
            sum+=nums[i];
        }
        if(sum%k!=0) return false;
        long target = sum/k;  

        int mask = 0;

        int dp[][]=new int[1<<n][k+1];

        for(int row[]: dp){
            Arrays.fill(row,-1);
        }    
        
        return helper(nums,mask,target,k,target,dp);
    }

    public boolean helper(int nums[], int mask, long remain, int k, long target, int dp[][]){
        if(k==0) return true;
        if(dp[mask][k]!=-1){
            if(dp[mask][k]==0) return false;
             return true;
        };

        boolean val = false;
        for(int i=0; i<nums.length; i++){
            if((mask&(1<<i))==0){
                if(nums[i]==remain){
                    if(helper(nums,mask^(1<<i),target,k-1,target, dp)){
                        val=true;
                        break;
                    } 
                }else if(nums[i]<=remain){
                    if(helper(nums,mask^(1<<i), remain-nums[i], k, target, dp)){
                        val=true; break;
                    } 
                }
            }
        }    
        dp[mask][k]=(val==true)?1:0;
        return val;            
    }
}
