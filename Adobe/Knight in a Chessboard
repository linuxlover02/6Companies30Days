class Solution {

    class Pair{
        int i, j; 
        Pair(int i, int j){
            this.i=i; this.j=j;
        }
    }

    public double knightProbability(int n, int k, int row, int col) {
        double curr[][] = new double[n][n];
        double next[][] = new double[n][n];
        curr[row][col]=1;

        ArrayDeque<Pair> q = new ArrayDeque<>();
        q.add(new Pair(row,col));
        
        for(int moves=1; moves<=k; moves++){
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    if(curr[i][j]!=0){
                        helper(next,i,j,curr[i][j],n);
                    }
                }
            }
            curr=next;
            next=new double[n][n];            
        }

        double ans=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                ans+=curr[i][j];
            }
        }
        return ans;
    }

     public void helper(double next[][], int i, int j, double prob,int n){
        int dx[] = {2,2,-2,-2,-1,-1,1,1};
        int dy[] = {-1,1,-1,1,2,-2,2,-2};
        for(int k=0; k<8; k++){
            int ni = i+dx[k]; int nj = j+dy[k];
            if(isValid(ni,nj,n)){
                next[ni][nj]+=(prob/8.00);
            }
        }
    }

    boolean isValid(int i, int j, int n){
        if(i<0 || j<0 || i>=n || j>=n) return false;
        return true;
    }
}
